// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Reflection.Emit;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.Extensions.Hosting;
using SuperCoolBooks.Models;
using static Microsoft.EntityFrameworkCore.DbLoggerCategory.Database;

namespace SuperCoolBooks.Data;

public partial class SuperCoolBooksContext : DbContext
{
    public SuperCoolBooksContext(DbContextOptions<SuperCoolBooksContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AspNetRole> AspNetRoles { get; set; }

    public virtual DbSet<AspNetRoleClaim> AspNetRoleClaims { get; set; }

    public virtual DbSet<AspNetUser> AspNetUsers { get; set; }

    public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }

    public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }

    public virtual DbSet<AspNetUserToken> AspNetUserTokens { get; set; }
    public virtual DbSet<Book> Books { get; set; }
    public virtual DbSet<Review> Reviews { get; set; }
    public virtual DbSet<Author> Authors { get; set; }
    public virtual DbSet<Genre> Genres { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AspNetRole>(entity =>
        {
            entity.HasIndex(e => e.NormalizedName, "RoleNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedName] IS NOT NULL)");

            entity.Property(e => e.Name).HasMaxLength(256);
            entity.Property(e => e.NormalizedName).HasMaxLength(256);
        });

        modelBuilder.Entity<AspNetRoleClaim>(entity =>
        {
            entity.HasIndex(e => e.RoleId, "IX_AspNetRoleClaims_RoleId");

            entity.Property(e => e.RoleId).IsRequired();

            entity.HasOne(d => d.Role).WithMany(p => p.AspNetRoleClaims).HasForeignKey(d => d.RoleId);
        });

        modelBuilder.Entity<AspNetUser>(entity =>
        {
            entity.HasIndex(e => e.NormalizedEmail, "EmailIndex");

            entity.HasIndex(e => e.NormalizedUserName, "UserNameIndex")
                .IsUnique()
                .HasFilter("([NormalizedUserName] IS NOT NULL)");

            entity.Property(e => e.Email).HasMaxLength(256);
            entity.Property(e => e.NormalizedEmail).HasMaxLength(256);
            entity.Property(e => e.NormalizedUserName).HasMaxLength(256);
            entity.Property(e => e.UserName).HasMaxLength(256);

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "AspNetUserRole",
                    r => r.HasOne<AspNetRole>().WithMany().HasForeignKey("RoleId"),
                    l => l.HasOne<AspNetUser>().WithMany().HasForeignKey("UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId");
                        j.ToTable("AspNetUserRoles");
                        j.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");
                    });
        });

        modelBuilder.Entity<AspNetUserClaim>(entity =>
        {
            entity.HasIndex(e => e.UserId, "IX_AspNetUserClaims_UserId");

            entity.Property(e => e.UserId).IsRequired();

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserClaims).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserLogin>(entity =>
        {
            entity.HasKey(e => new { e.LoginProvider, e.ProviderKey });

            entity.HasIndex(e => e.UserId, "IX_AspNetUserLogins_UserId");

            entity.Property(e => e.LoginProvider).HasMaxLength(128);
            entity.Property(e => e.ProviderKey).HasMaxLength(128);
            entity.Property(e => e.UserId).IsRequired();

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserLogins).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<AspNetUserToken>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.LoginProvider, e.Name });

            entity.Property(e => e.LoginProvider).HasMaxLength(128);
            entity.Property(e => e.Name).HasMaxLength(128);

            entity.HasOne(d => d.User).WithMany(p => p.AspNetUserTokens).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<Genre>(entity =>
        {
            entity.HasKey(e => e.GenreId);
            entity.HasIndex(e => e.Title, "IX_Genre_Titel");
            entity.HasAlternateKey(e => e.Title).HasName("Genre_Uniqe_Title_Constraint");

            entity.Property(e => e.Title).HasMaxLength(255).IsRequired();
            entity.Property(e => e.Description).HasMaxLength(1000);
            entity.Property(e => e.Created).HasColumnType("datetime").HasDefaultValueSql("GETDATE()");

        });

        modelBuilder.Entity<Author>(entity =>
        {
            entity.HasKey(e => e.AuthorId);
            entity.Property(e => e.FirstName).HasMaxLength(100).IsRequired();
            entity.Property(e => e.LastName).HasMaxLength(100).IsRequired();
            entity.Property(e => e.BirthDate).IsRequired();
            entity.Property(e => e.Created).HasColumnType("datetime").HasDefaultValueSql("GETDATE()");
            entity.Property(e => e.ImagePath).IsRequired(false); //Had to change to false so validation worked correctly
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasKey(e => e.ReviewId);
            entity.Property(e => e.UserId);
            entity.Property(e => e.BookId);
            entity.Property(e => e.Title).HasMaxLength(255).IsRequired();
            entity.Property(e => e.ReviewText).HasMaxLength(1000).IsRequired();
            entity.Property(e => e.Rating).IsRequired();
            entity.Property(e => e.IsDeleted).HasColumnType("bit").HasDefaultValue("false").IsRequired();
            entity.Property(e => e.Created).HasColumnType("datetime2").HasDefaultValueSql("GETDATE()");

            //entity.HasOne(d => d.Reviews).WithMany(b => b.Books).UsingEntity(
            //l => l.HasOne(typeof(Genre)).WithMany().OnDelete(DeleteBehavior.NoAction),
            //r => r.HasOne(typeof(Book)).WithMany().OnDelete(DeleteBehavior.NoAction)
            //);

        //.HasMany(e => e.Posts)
        //.WithOne(e => e.Blog)
        //.OnDelete(DeleteBehavior.Restrict);

        });

            modelBuilder.Entity<Book>(entity =>
        {
            entity.HasKey(e => e.BookId);
            entity.Property(e => e.UserId).IsRequired();
            entity.Property(e => e.Title).HasMaxLength(255).IsRequired();
            entity.Property(e => e.Description).HasMaxLength(1000).IsRequired();
            entity.Property(e => e.ISBN).HasMaxLength(20).IsRequired();
            entity.Property(e => e.ImagePath).IsRequired();
            entity.Property(e => e.isDeleted).HasColumnType("bit").HasDefaultValue("false").IsRequired();
            entity.Property(e => e.Created).HasColumnType("datetime2").HasDefaultValueSql("GETDATE()");
            entity.Property(e => e.ReleaseDate).HasColumnType("datetime2").IsRequired();

            entity.HasMany(d => d.Author).WithMany(b => b.Books).UsingEntity(
                l => l.HasOne(typeof(Author)).WithMany().OnDelete(DeleteBehavior.NoAction),
                r => r.HasOne(typeof(Book)).WithMany().OnDelete(DeleteBehavior.NoAction)
                );

            entity.HasMany(d => d.Genres).WithMany(b => b.Books).UsingEntity(
                l => l.HasOne(typeof(Genre)).WithMany().OnDelete(DeleteBehavior.NoAction),
                r => r.HasOne(typeof(Book)).WithMany().OnDelete(DeleteBehavior.NoAction)
                );
            
            
            entity.HasMany(e => e.Reviews)
            .WithOne(e => e.Book)
            .OnDelete(DeleteBehavior.Restrict);

        });


    OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}